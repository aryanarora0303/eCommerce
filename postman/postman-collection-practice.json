{
    "info": {
        "name": "eCommerce API - Practice Test Suite",
        "description": "Practice version of the comprehensive integration test suite. Fill in the TODO sections to complete the tests.",
        "version": "1.0.0",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Authentication Tests",
            "description": "User registration, login, and authentication flow tests",
            "item": [
                {
                    "name": "Register New User Successfully",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// TODO: Generate unique email for test",
                                    "// Hint: Use Date.now() and pm.environment.set()",
                                    "",
                                    "// TODO: Set test user data in environment variables",
                                    "// Variables needed: testEmail, testPassword, testFirstName, testLastName"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 201', function () {",
                                    "    // TODO: Check that response status code is 201",
                                    "});",
                                    "",
                                    "pm.test('Response has required properties', function () {",
                                    "    // TODO: Verify response has access_token, refresh_token, and user properties",
                                    "    // TODO: Check that user has user_id and email properties",
                                    "    // TODO: Ensure password_hash is NOT in the response",
                                    "});",
                                    "",
                                    "pm.test('User data is correct', function () {",
                                    "    // TODO: Verify user email matches the test email",
                                    "    // TODO: Verify user role is 'customer'",
                                    "});",
                                    "",
                                    "// TODO: Store tokens and user ID in environment variables for later tests",
                                    "// Variables to set: accessToken, refreshToken, testUserId"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\",\n    \"first_name\": \"{{testFirstName}}\",\n    \"last_name\": \"{{testLastName}}\",\n    \"phone\": \"+12345678901\",\n    \"address\": \"123 Test St\",\n    \"city\": \"Toronto\",\n    \"state\": \"Ontario\",\n    \"zip_code\": \"M1M 1M1\",\n    \"country\": \"Canada\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/register",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "register"]
                        }
                    }
                },
                {
                    "name": "Register Admin User",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": ["// TODO: Generate unique admin email", "// Set adminEmail environment variable"]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 201', function () {",
                                    "    // TODO: Verify status code",
                                    "});",
                                    "",
                                    "pm.test('User role is admin', function () {",
                                    "    // TODO: Check that user.role equals 'admin'",
                                    "});",
                                    "",
                                    "// TODO: Store admin tokens in environment",
                                    "// Variables: adminToken, adminUserId"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"AdminPass123!\",\n    \"first_name\": \"Admin\",\n    \"last_name\": \"User\",\n    \"role\": \"admin\",\n    \"phone\": \"+12345678902\",\n    \"address\": \"456 Admin St\",\n    \"city\": \"Toronto\",\n    \"state\": \"Ontario\",\n    \"zip_code\": \"M2M 2M2\",\n    \"country\": \"Canada\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/register",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "register"]
                        }
                    }
                },
                {
                    "name": "Login User Successfully",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Check status code is 200",
                                    "});",
                                    "",
                                    "pm.test('Response has tokens', function () {",
                                    "    // TODO: Verify response contains access_token, refresh_token, and user",
                                    "});",
                                    "",
                                    "pm.test('User email matches', function () {",
                                    "    // TODO: Confirm user email matches testEmail from environment",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "login"]
                        }
                    }
                },
                {
                    "name": "Login with Invalid Credentials",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 401', function () {",
                                    "    // TODO: Verify unauthorized status code",
                                    "});",
                                    "",
                                    "pm.test('Error message is present', function () {",
                                    "    // TODO: Check that response has a message property",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"nonexistent@example.com\",\n    \"password\": \"wrongpassword\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "login"]
                        }
                    }
                },
                {
                    "name": "Get User Profile",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Verify successful response",
                                    "});",
                                    "",
                                    "pm.test('Profile data is correct', function () {",
                                    "    // TODO: Check response has user_id, email properties",
                                    "    // TODO: Ensure password_hash is NOT present",
                                    "    // TODO: Verify email matches testEmail",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/auth/profile",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "profile"]
                        }
                    }
                },
                {
                    "name": "Logout User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Check successful logout",
                                    "});",
                                    "",
                                    "pm.test('Logout message is present', function () {",
                                    "    // TODO: Verify response contains a message",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/auth/logout",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "logout"]
                        }
                    }
                }
            ]
        },
        {
            "name": "User Management Tests",
            "description": "Tests for user CRUD operations and authorization",
            "item": [
                {
                    "name": "Get All Users (Admin Only)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Verify successful response",
                                    "});",
                                    "",
                                    "pm.test('Response has pagination structure', function () {",
                                    "    // TODO: Check response has 'data' property (array)",
                                    "    // TODO: Check response has 'pagination' property",
                                    "});",
                                    "",
                                    "pm.test('Pagination has required fields', function () {",
                                    "    // TODO: Verify pagination has page, limit, total properties",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users",
                            "host": ["{{baseUrl}}"],
                            "path": ["users"]
                        }
                    }
                },
                {
                    "name": "Get Users with Search",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Check successful search",
                                    "});",
                                    "",
                                    "pm.test('Search returns results structure', function () {",
                                    "    // TODO: Verify response has data array",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users?search=Test",
                            "host": ["{{baseUrl}}"],
                            "path": ["users"],
                            "query": [
                                {
                                    "key": "search",
                                    "value": "Test"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Get User by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Verify response",
                                    "});",
                                    "",
                                    "pm.test('User data is complete', function () {",
                                    "    // TODO: Check for user_id, email, first_name, last_name",
                                    "    // TODO: Ensure password_hash is NOT present",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/{{testUserId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "{{testUserId}}"]
                        }
                    }
                },
                {
                    "name": "Update User Information",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Check update was successful",
                                    "});",
                                    "",
                                    "pm.test('User data is updated', function () {",
                                    "    // TODO: Verify first_name is 'Updated' and last_name is 'Name'",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"first_name\": \"Updated\",\n    \"last_name\": \"Name\",\n    \"phone\": \"+1111111111\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/{{testUserId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "{{testUserId}}"]
                        }
                    }
                },
                {
                    "name": "Delete User (Admin Only)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Verify successful deletion",
                                    "});",
                                    "",
                                    "pm.test('Deletion confirmation message', function () {",
                                    "    // TODO: Check response has a message property",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/{{testUserId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "{{testUserId}}"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Product Management Tests",
            "description": "Tests for product CRUD operations",
            "item": [
                {
                    "name": "Create Product (Admin Only)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 201', function () {",
                                    "    // TODO: Check product creation was successful",
                                    "});",
                                    "",
                                    "pm.test('Product data is complete', function () {",
                                    "    // TODO: Verify response has product_id, name, price, category",
                                    "    // TODO: Check name is 'Test Product', price is 99.99, category is 'Electronics'",
                                    "});",
                                    "",
                                    "// TODO: Store product ID for other tests",
                                    "// Set testProductId environment variable"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Test Product\",\n    \"description\": \"A test product for API testing\",\n    \"price\": 99.99,\n    \"category\": \"Electronics\",\n    \"brand\": \"TestBrand\",\n    \"stock_quantity\": 100,\n    \"image_url\": \"https://example.com/product.jpg\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/products",
                            "host": ["{{baseUrl}}"],
                            "path": ["products"]
                        }
                    }
                },
                {
                    "name": "Get All Products",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Verify successful response",
                                    "});",
                                    "",
                                    "pm.test('Products array is returned', function () {",
                                    "    // TODO: Check response has 'data' property that is an array",
                                    "});",
                                    "",
                                    "pm.test('Pagination is present', function () {",
                                    "    // TODO: Verify response has pagination property",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/products",
                            "host": ["{{baseUrl}}"],
                            "path": ["products"]
                        }
                    }
                },
                {
                    "name": "Get Product by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Check successful retrieval",
                                    "});",
                                    "",
                                    "pm.test('Product details are complete', function () {",
                                    "    // TODO: Verify product_id, name, price, description properties exist",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/products/{{testProductId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["products", "{{testProductId}}"]
                        }
                    }
                },
                {
                    "name": "Update Product (Admin Only)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Verify update was successful",
                                    "});",
                                    "",
                                    "pm.test('Product is updated', function () {",
                                    "    // TODO: Check name is 'Updated Test Product' and price is 149.99",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"Updated Test Product\",\n    \"price\": 149.99,\n    \"description\": \"An updated test product\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/products/{{testProductId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["products", "{{testProductId}}"]
                        }
                    }
                },
                {
                    "name": "Delete Product (Admin Only)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Verify successful deletion",
                                    "});",
                                    "",
                                    "pm.test('Deletion confirmation', function () {",
                                    "    // TODO: Check response has message property",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/products/{{testProductId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["products", "{{testProductId}}"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Order Management Tests",
            "description": "Tests for order creation and management",
            "item": [
                {
                    "name": "Create Order",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 201', function () {",
                                    "    // TODO: Verify order creation was successful",
                                    "});",
                                    "",
                                    "pm.test('Order data is complete', function () {",
                                    "    // TODO: Check for order_id, user_id, order_items properties",
                                    "    // TODO: Verify order_items is an array with length > 0",
                                    "});",
                                    "",
                                    "// TODO: Store order ID for other tests",
                                    "// Set testOrderId environment variable"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"order_items\": [\n        {\n            \"product_id\": {{testProductId}},\n            \"quantity\": 2,\n            \"unit_price\": 99.99\n        }\n    ],\n    \"shipping_address\": \"123 Test St\",\n    \"payment_method\": \"Credit Card\",\n    \"notes\": \"Test order for API testing\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/orders",
                            "host": ["{{baseUrl}}"],
                            "path": ["orders"]
                        }
                    }
                },
                {
                    "name": "Get User Orders",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Check successful retrieval",
                                    "});",
                                    "",
                                    "pm.test('Orders data structure is correct', function () {",
                                    "    // TODO: Verify response has data array",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/orders",
                            "host": ["{{baseUrl}}"],
                            "path": ["orders"]
                        }
                    }
                },
                {
                    "name": "Get Order by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Verify successful response",
                                    "});",
                                    "",
                                    "pm.test('Order details are complete', function () {",
                                    "    // TODO: Check for order_id, user_id, status, total_amount properties",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/orders/{{testOrderId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["orders", "{{testOrderId}}"]
                        }
                    }
                },
                {
                    "name": "Update Order Status (Admin Only)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Verify update was successful",
                                    "});",
                                    "",
                                    "pm.test('Order status is updated', function () {",
                                    "    // TODO: Check that status property equals 'processing'",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"status\": \"processing\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/orders/{{testOrderId}}/status",
                            "host": ["{{baseUrl}}"],
                            "path": ["orders", "{{testOrderId}}", "status"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Review Management Tests",
            "description": "Tests for product reviews",
            "item": [
                {
                    "name": "Create Product Review",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 201', function () {",
                                    "    // TODO: Verify review creation was successful",
                                    "});",
                                    "",
                                    "pm.test('Review data is complete', function () {",
                                    "    // TODO: Check for review_id, product_id, rating, title, comment properties",
                                    "    // TODO: Verify rating is 5 and title is 'Excellent Product'",
                                    "});",
                                    "",
                                    "// TODO: Store review ID for other tests",
                                    "// Set testReviewId environment variable"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"product_id\": {{testProductId}},\n    \"rating\": 5,\n    \"title\": \"Excellent Product\",\n    \"comment\": \"This product exceeded my expectations! Highly recommend.\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/reviews",
                            "host": ["{{baseUrl}}"],
                            "path": ["reviews"]
                        }
                    }
                },
                {
                    "name": "Get Product Reviews",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Check successful retrieval",
                                    "});",
                                    "",
                                    "pm.test('Reviews data structure is correct', function () {",
                                    "    // TODO: Verify response has data array",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/reviews?product_id={{testProductId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["reviews"],
                            "query": [
                                {
                                    "key": "product_id",
                                    "value": "{{testProductId}}"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Update Review",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Verify update was successful",
                                    "});",
                                    "",
                                    "pm.test('Review is updated', function () {",
                                    "    // TODO: Check title is 'Updated Review Title' and rating is 4",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"Updated Review Title\",\n    \"rating\": 4,\n    \"comment\": \"Updated my review after more usage.\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/reviews/{{testReviewId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["reviews", "{{testReviewId}}"]
                        }
                    }
                },
                {
                    "name": "Delete Review",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Verify successful deletion",
                                    "});",
                                    "",
                                    "pm.test('Deletion confirmation', function () {",
                                    "    // TODO: Check response has message property",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/reviews/{{testReviewId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["reviews", "{{testReviewId}}"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Authorization Tests",
            "description": "Tests for role-based access control",
            "item": [
                {
                    "name": "Customer Cannot Access Admin Endpoints",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 403 (Forbidden)', function () {",
                                    "    // TODO: Check that customer gets forbidden error when accessing admin endpoints",
                                    "});",
                                    "",
                                    "pm.test('Error message indicates insufficient permissions', function () {",
                                    "    // TODO: Verify error response has message property",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users",
                            "host": ["{{baseUrl}}"],
                            "path": ["users"]
                        }
                    }
                },
                {
                    "name": "Unauthenticated Request Returns 401",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 401 (Unauthorized)', function () {",
                                    "    // TODO: Check unauthorized status when no token provided",
                                    "});",
                                    "",
                                    "pm.test('Error message indicates authentication required', function () {",
                                    "    // TODO: Verify error response has message property",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/auth/profile",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "profile"]
                        }
                    }
                },
                {
                    "name": "Invalid Token Returns 401",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 401 (Unauthorized)', function () {",
                                    "    // TODO: Check unauthorized status with invalid token",
                                    "});",
                                    "",
                                    "pm.test('Error indicates invalid token', function () {",
                                    "    // TODO: Verify error response has message property",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer invalid-token-here"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/auth/profile",
                            "host": ["{{baseUrl}}"],
                            "path": ["auth", "profile"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Error Handling Tests",
            "description": "Tests for various error scenarios",
            "item": [
                {
                    "name": "404 for Non-Existent Resource",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 404', function () {",
                                    "    // TODO: Check not found status for non-existent product",
                                    "});",
                                    "",
                                    "pm.test('Error message is present', function () {",
                                    "    // TODO: Verify error response has message property",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/products/99999",
                            "host": ["{{baseUrl}}"],
                            "path": ["products", "99999"]
                        }
                    }
                },
                {
                    "name": "400 for Invalid Request Data",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 400', function () {",
                                    "    // TODO: Check bad request status for invalid data",
                                    "});",
                                    "",
                                    "pm.test('Validation error details provided', function () {",
                                    "    // TODO: Verify error response has message property",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"\",\n    \"price\": -10,\n    \"invalid_field\": \"test\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/products",
                            "host": ["{{baseUrl}}"],
                            "path": ["products"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Health Check",
            "description": "Basic health and connectivity tests",
            "item": [
                {
                    "name": "API Health Check",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Check API health endpoint returns OK",
                                    "});",
                                    "",
                                    "pm.test('Health status is OK', function () {",
                                    "    // TODO: Verify response has status property equal to 'ok'",
                                    "});",
                                    "",
                                    "pm.test('Response time is acceptable', function () {",
                                    "    // TODO: Check that response time is less than 2000ms",
                                    "    // Hint: Use pm.response.responseTime",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/health",
                            "host": ["{{baseUrl}}"],
                            "path": ["health"]
                        }
                    }
                },
                {
                    "name": "Root Endpoint",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    // TODO: Check root endpoint returns OK",
                                    "});",
                                    "",
                                    "pm.test('Welcome message is present', function () {",
                                    "    // TODO: Verify response has message property",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/",
                            "host": ["{{baseUrl}}"],
                            "path": [""]
                        }
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global pre-request script - TODO: Add any global setup here",
                    "console.log('Running request:', pm.info.requestName);",
                    "",
                    "// TODO: Ensure baseUrl is set",
                    "// Hint: Use pm.environment.get() and pm.environment.set()"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global test script - runs after every request",
                    "",
                    "pm.test('Response time is reasonable', function () {",
                    "    // TODO: Check that response time is less than 5000ms",
                    "});",
                    "",
                    "pm.test('Response has valid JSON structure', function () {",
                    "    // TODO: If response is JSON, verify it parses correctly",
                    "    // Hint: Check Content-Type header and use pm.response.to.be.json",
                    "});"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:3151",
            "type": "string"
        }
    ]
}
