#!/bin/bash

echo "üöÄ eCommerce API - Postman Collection Generator"
echo "=============================================="

# Configuration
API_URL="http://localhost:3151"
HEALTH_ENDPOINT="/health"
OPENAPI_ENDPOINT="/api-json"
POSTMAN_DIR="postman"
COLLECTION_FILE="generated-postman-collection.json"
ENVIRONMENT_FILE="postman-environment.json"

# Create postman directory if it doesn't exist
if [ ! -d "$POSTMAN_DIR" ]; then
    echo "üìÅ Creating postman directory..."
    mkdir -p "$POSTMAN_DIR"
    echo "‚úÖ Directory created: $POSTMAN_DIR/"
fi

# Check if API is running
echo "üì° Checking if API is running at $API_URL..."
if ! curl -sf "$API_URL$HEALTH_ENDPOINT" > /dev/null; then
    echo "‚ùå Error: API is not running at $API_URL"
    echo "   Please start the API server with: npm run start:dev"
    exit 1
fi

echo "‚úÖ API is running successfully!"

# Download OpenAPI specification
echo "ÔøΩ Downloading OpenAPI specification..."
if ! curl -sf "$API_URL$OPENAPI_ENDPOINT" -o "postman-collection-openapi.json"; then
    echo "‚ùå Error: Could not download OpenAPI specification"
    echo "   Make sure the API is running and OpenAPI documentation is available"
    exit 1
fi

echo "‚úÖ OpenAPI specification downloaded!"

echo ""
echo "üìã Available Postman Collections:"
echo "================================="
echo "1. üìÅ $POSTMAN_DIR/postman-collection-openapi.json - Traditional OpenAPI-generated collection (no tests)"
echo "2. üìÅ $POSTMAN_DIR/postman-collection.json - Complete API test suite (32 requests, ~100+ tests)"
echo "3. üìÅ $POSTMAN_DIR/postman-collection-practice.json - Practice test suite (empty tests for learning)"
echo "4. üìÅ $POSTMAN_DIR/postman-environment.json - Environment variables and test data"
echo ""

# Run the collections if requested
echo "üîß Usage Options:"
echo "================"
echo ""
echo "Option 1: Import into Postman GUI"
echo "  üìã For basic API exploration (no tests):"
echo "    ‚Ä¢ Import '$POSTMAN_DIR/postman-collection-openapi.json' directly"
echo "    ‚Ä¢ Import '$POSTMAN_DIR/postman-environment.json' for variables"
echo ""
echo "  üß™ For comprehensive testing:"
echo "    ‚Ä¢ Import '$POSTMAN_DIR/postman-collection.json' and '$POSTMAN_DIR/postman-environment.json'"
echo "    ‚Ä¢ Use Collection Runner to execute all tests"
echo ""
echo "  üìö For learning/practice:"
echo "    ‚Ä¢ Import '$POSTMAN_DIR/postman-collection-practice.json' and '$POSTMAN_DIR/postman-environment.json'"
echo "    ‚Ä¢ Fill in TODO sections to learn API testing"
echo ""
echo "Option 2: Run with Newman CLI"
echo "  üèÉ‚Äç‚ôÇÔ∏è For automated testing in CI/CD: Not in scope"
echo ""

# Offer to run tests
echo "üöÄ Collection Import Instructions:"
echo "=================================="
echo ""
echo "üìã To import the traditional OpenAPI collection (basic endpoints):"
echo "   1. Open Postman"
echo "   2. Click 'Import' ‚Üí 'Upload Files'"
echo "   3. Navigate to '$POSTMAN_DIR/' folder"
echo "   4. Select 'openapi-spec.json'"
echo "   5. Also import 'postman-environment.json' for environment variables"
echo "   6. This gives you all endpoints for manual testing"
echo ""
echo "üß™ To import the comprehensive test collection:"
echo "   1. Import both '$POSTMAN_DIR/postman-collection.json' and '$POSTMAN_DIR/postman-environment.json'"
echo "   2. Use Collection Runner to execute automated tests"
echo ""
echo "üìö To import the practice collection for learning:"
echo "   1. Import both '$POSTMAN_DIR/postman-collection-practice.json' and '$POSTMAN_DIR/postman-environment.json'"
echo "   2. Fill in TODO sections in test scripts to learn API testing"
echo ""
echo "üîó Direct OpenAPI import (alternative):"
echo "   ‚Ä¢ In Postman: Import ‚Üí Link ‚Üí http://localhost:3151/api-json"
echo ""

echo ""
echo "üìä Test Coverage Summary:"
echo "========================="
echo "‚Ä¢ Authentication & Security: ‚úÖ JWT, login/logout, role-based access"
echo "‚Ä¢ User Management: ‚úÖ CRUD operations, search, validation"  
echo "‚Ä¢ Product Management: ‚úÖ Admin operations, public access, filtering"
echo "‚Ä¢ Order Processing: ‚úÖ Creation, status updates, history"
echo "‚Ä¢ Review System: ‚úÖ CRUD operations, product association"
echo "‚Ä¢ Authorization: ‚úÖ Role-based permissions, security testing"
echo "‚Ä¢ Error Handling: ‚úÖ Validation, 404s, unauthorized access"
echo "‚Ä¢ Health Checks: ‚úÖ API availability, performance"
echo "‚Ä¢ E2E Workflows: ‚úÖ Complete customer journeys, edge cases"
echo ""
echo "üìÅ Generated Files:"
echo "=================="
echo "‚Ä¢ $POSTMAN_DIR/postman-collection-openapi.json - OpenAPI specification & traditional Postman collection"
echo "‚Ä¢ $POSTMAN_DIR/postman-collection.json - Comprehensive test collection"
echo "‚Ä¢ $POSTMAN_DIR/postman-collection-practice.json - Practice test collection with TODO sections"
echo "‚Ä¢ $POSTMAN_DIR/postman-environment.json - Environment variables"
echo "‚Ä¢ $POSTMAN_DIR/test-report.html - Test execution report (if tests ran)"
echo ""
echo "üéØ Next Steps:"
echo "=============="
echo "1. Import $POSTMAN_DIR/postman-collection-openapi.json for basic API exploration"
echo "2. Import $POSTMAN_DIR/postman-collection.json for comprehensive testing"
echo "3. Import $POSTMAN_DIR/postman-collection-practice.json for learning API testing"
echo ""
echo "üí° Collection Types Explained:"
echo "============================="
echo "üîß $POSTMAN_DIR/postman-collection-openapi.json:"
echo "   ‚Ä¢ Basic endpoints without test scripts"
echo "   ‚Ä¢ Good for API exploration and manual testing"
echo "   ‚Ä¢ Generated directly from OpenAPI specification"
echo ""
echo "üß™ $POSTMAN_DIR/postman-collection.json:"
echo "   ‚Ä¢ Comprehensive test suite with assertions"
echo "   ‚Ä¢ Automated validation of responses"
echo "   ‚Ä¢ Equivalent to your Jest integration tests"
echo ""
echo "üìö $POSTMAN_DIR/postman-collection-practice.json:"
echo "   ‚Ä¢ Learning-oriented version with TODO sections"
echo "   ‚Ä¢ Same structure as complete collection but empty tests"
echo "   ‚Ä¢ Perfect for hands-on API testing education"
echo ""
echo "üóÑÔ∏è  Database Management Commands:"
echo "=================================="
echo "‚Ä¢ npm run db:seed       - Populate database with sample data"
echo "‚Ä¢ npm run db:truncate   - Delete all data from database"
echo "‚Ä¢ npm test              - Run test suite (requires clean/seeded DB)"
echo ""
echo "‚ú® Happy Testing!"
